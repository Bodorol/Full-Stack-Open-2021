{"ast":null,"code":"var _jsxFileName = \"/home/brenner/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Display = ({\n  text,\n  stat\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [text, \": \", stat]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Display;\n\nconst Button = ({\n  text,\n  handleClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Button;\n\nconst App = () => {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const totalFeedback = good + bad + neutral;\n  const avgScore = (good - bad) / totalFeedback;\n  const percentPositive = good * 100 / totalFeedback;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Give Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"Good\",\n      handleClick: () => setGood(good + 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"Neutral\",\n      handleClick: () => setNeutral(neutral + 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"Bad\",\n      handleClick: () => setBad(bad + 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Display, {\n      text: \"Good\",\n      stat: good\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Display, {\n      text: \"Neutral\",\n      stat: neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Display, {\n      text: \"Bad\",\n      stat: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Display, {\n      text: \"Total Feedback\",\n      stat: totalFeedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Display, {\n      text: \"Average Score\",\n      stat: avgScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Display, {\n      text: \"Percent Positive Feedback\",\n      stat: percentPositive + \"%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Display\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/home/brenner/unicafe/src/App.js"],"names":["React","useState","Display","text","stat","Button","handleClick","App","good","setGood","neutral","setNeutral","bad","setBad","totalFeedback","avgScore","percentPositive"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAAkB;AAChC,sBACE;AAAA,2BACE;AAAA,iBAAID,IAAJ,QAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;KAAMF,O;;AAQN,MAAMG,MAAM,GAAG,CAAC;AAACF,EAAAA,IAAD;AAAOG,EAAAA;AAAP,CAAD,KAAyB;AACtC,sBACE;AAAQ,IAAA,OAAO,EAAEA,WAAjB;AAAA,cAA+BH;AAA/B;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAJD;;MAAME,M;;AAMN,MAAME,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,CAAD,CAA9B;AACA,QAAMa,aAAa,GAAGN,IAAI,GAAGI,GAAP,GAAaF,OAAnC;AACA,QAAMK,QAAQ,GAAG,CAACP,IAAI,GAAGI,GAAR,IAAeE,aAAhC;AACA,QAAME,eAAe,GAAGR,IAAI,GAAG,GAAP,GAAaM,aAArC;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,MAAb;AAAoB,MAAA,WAAW,EAAE,MAAML,OAAO,CAACD,IAAI,GAAG,CAAR;AAA9C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,WAAW,EAAE,MAAMG,UAAU,CAACD,OAAO,GAAG,CAAX;AAApD;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,KAAb;AAAmB,MAAA,WAAW,EAAE,MAAMG,MAAM,CAACD,GAAG,GAAG,CAAP;AAA5C;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC,MAAd;AAAqB,MAAA,IAAI,EAAEJ;AAA3B;AAAA;AAAA;AAAA;AAAA,YANF,eAOE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC,SAAd;AAAwB,MAAA,IAAI,EAAEE;AAA9B;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC,KAAd;AAAoB,MAAA,IAAI,EAAEE;AAA1B;AAAA;AAAA;AAAA;AAAA,YARF,eASE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC,gBAAd;AAA+B,MAAA,IAAI,EAAEE;AAArC;AAAA;AAAA;AAAA;AAAA,YATF,eAUE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC,eAAd;AAA8B,MAAA,IAAI,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAC,2BAAd;AAA0C,MAAA,IAAI,EAAEC,eAAe,GAAG;AAAlE;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAvBD;;GAAMT,G;;MAAAA,G;AAyBN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst Display = ({text, stat}) => {\n  return (\n    <div>\n      <p>{text}: {stat}</p>\n    </div>\n  );\n}\n\nconst Button = ({text, handleClick}) => {\n  return (\n    <button onClick={handleClick}>{text}</button>\n  );\n}\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const totalFeedback = good + bad + neutral;\n  const avgScore = (good - bad) / totalFeedback;\n  const percentPositive = good * 100 / totalFeedback;\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n      <Button text=\"Good\" handleClick={() => setGood(good + 1)} />\n      <Button text=\"Neutral\" handleClick={() => setNeutral(neutral + 1)} />\n      <Button text=\"Bad\" handleClick={() => setBad(bad + 1)} />\n      <h1>Statistics</h1>\n      <Display text=\"Good\" stat={good} />\n      <Display text=\"Neutral\" stat={neutral} />\n      <Display text=\"Bad\" stat={bad} />\n      <Display text=\"Total Feedback\" stat={totalFeedback} />\n      <Display text=\"Average Score\" stat={avgScore} />\n      <Display text=\"Percent Positive Feedback\" stat={percentPositive + \"%\"} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}